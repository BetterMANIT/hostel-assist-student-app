name: Build and Release APK

on:
  push:
    branches:
      - main  # Triggers on pushes to the main branch

permissions:
  contents: write  # Required for creating releases

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout code
      - name: Checkout code
        uses: actions/checkout@v3  # Updated to latest compatible version

      # Step 2: Set up JDK 17
      - name: Set up JDK 17
        uses: actions/setup-java@v3  # Updated to latest compatible version
        with:
          distribution: 'zulu'
          java-version: '17'

      # Step 3: Cache Gradle packages
      - name: Cache Gradle packages
        uses: actions/cache@v3  # Updated to latest compatible version
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      # Step 4: Create google-services.json from secret and debug the contents
      - name: Create google-services.json
        run: |
          echo '${{ secrets.FIREBASE_CONFIG }}' > $GITHUB_WORKSPACE/app/google-services.json
          echo "google-services.json content for debug:"
          cat $GITHUB_WORKSPACE/app/google-services.json
        shell: bash

      # Step 5: Verify JSON format (Fails if JSON is malformed)
      - name: Verify google-services.json
        run: |
          jq . $GITHUB_WORKSPACE/app/google-services.json > /dev/null || exit 1
        shell: bash

      # Step 6: Build APK
      - name: Build APK
        run: ./gradlew assembleRelease
        env:
          JAVA_HOME: ${{ runner.tool_cache }}/Java_Zulu_jdk/17.0.13-11/x64

      # Step 7: Release APK to GitHub
      - name: Release APK
        uses: ncipollo/release-action@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          tag: latest
          name: Release on Main Branch
          artifacts: app/build/outputs/apk/release/app-release.apk
          makeLatest: true
